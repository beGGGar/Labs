#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <locale.h>
#include <stdio.h>
#include <Windows.h>
#include <iomanip>
#define max_bread 20

using namespace std;

class storage {
	char* name;	   //Название товара
	double price;   // цена

	//friend void sortBread(storage& BB, int n);		//сортировка продуктов по уменьшению количества 
public:
	int quant;	    // количество
	int num;	         // номер секции
	static int count;        // счетчик существующих объектов класса

	storage();
	~storage();
	void printList(storage* product, int n);
	void findBread(storage* product, int n);        //найти хлеб
	void filterNum(storage* product, int n);        //отфильтровать хлеб по секциям
	void saveList(storage* product, int n);         // сохранение
	int loadList(storage* product);				//загрузка из базы
	void define();

	char*  getName() { return name; }
	double getPrice() { return price; }
	int    getNum() { return num; }
	int	   getQuant() { return quant; }
	int    getCount() { return count; }

	void setName(char* name_) { strcpy(name, name_); }
	void setPrice(double price_) { price = price_; }
	void setNum(int num_) { num = num_; }
	void setQuant(int quant_) { quant = quant_; }
};

void DialogInterface();
void sortBread(storage* product, int n);		//сортировка продуктов по уменьшению количества 
int storage::count = 0;

int main() {
	setlocale(LC_ALL, "Rus");
	SetConsoleCP(1251); // Ввод с консоли в кодировке
	SetConsoleOutputCP(1251); // Вывод на консоль в кодировке

	storage  BB[max_bread]; 
	//storage *bread = BB;
	int num = 0, c;

	FILE* file;
	if ((file = fopen("data.txt", "r+")) == NULL)
		cout << "Файла нет, первый запуск." << endl;
	else {
		num = BB[0].loadList(BB);
	}

	DialogInterface();
	while (true) { // цикл с ключами
		cin >> c;
		switch (c) {
		case 0:
			//кидало ошибку при случайном вводе буквы. костыль зарешал
			break;
		case 1: // добавление товара
			BB[num].define();
			num++;
			cout << "Введите номер функции: " << endl;
			break;
		case 2:
			BB[0].printList(BB, num);
			break;
		case 3:
			BB[0].findBread(BB, num);
			break;
		case 4:
			BB[0].filterNum(BB, num);
			break;
		case 5:
			sortBread(BB, num);
			break;
		case 6:
			BB[0].saveList(BB, num);
			return 0;
		default:
			cout << "Неверный запрос, повторите попытку..." << endl;
			c = 0;
		}
	}
	cout << "Выполнение прервано... Произведен откат базы данных." << endl;
	return 0;
}

void DialogInterface() {
	//интерфейс
	cout << "Добавить новый элемент................1" << endl;
	cout << "Распечатать базу товаров..............2" << endl;
	cout << "Поиск товара по названию..............3" << endl;
	cout << "Фильтр по номеру секции...............4" << endl;
	cout << "Сортировать по уменьшению количества..5" << endl;
	cout << "Выход из программы....................6" << endl;
	cout << "......................................." << endl;
	cout << "Введите номер функции: " << endl;
};

storage::storage() {
	//Конструктор по-умолчанию
	name = new char[40];
	strcpy(name, " ");
	price = 0;
	quant = 0;
	num = 0;
	count++;
}
//storage::storage(const char s[], double newprice, int newquant, int newnum) {
//	name = new char[strlen(s) + 1];
//	strcpy(name, s);
//	price = newprice;
//	quant = newquant;
//	num = newnum;
//}
storage::~storage() {
	//cout << endl << "storage::Destructor!" << endl;
	delete[] name;
	count--;
}

void storage::define() {
	char str[40];
	cout << "Название :";
	cin >> str;
	name = new char[strlen(str) + 1];
	strcpy(name, str);
	cout << "Цена: ";
	cin >> price;
	cout << "Количество: ";
	cin >> quant;
	cout << "Номер секции: ";
	cin >> num;
}

void storage::printList(storage * product, int n) {
	//вывод таблицы значений
	char buff[80] = {};
	storage* R = product;
	cout << setw(20) << "Название товара" << setw(10) << "цена" << setw(15) << "количество" << setw(15) << "секция" << endl;
	cout << "--------------------------------------------------" << endl;
	for (int i = 0; i < n; R++, i++) {
		cout << setw(20) << R->getName() << setw(10) << R->getPrice() << setw(15) << R->getNum() << setw(15) << R->getQuant() << endl;
	}
	cout << "--------------------------------------------------" << endl;
	cout << "Количество записей: " << n << endl;
	cout << "Введите номер функции: ";
}

void storage::findBread(storage* product, int n) {
	char buff[80] = {};
	storage* R = product;

	cout << "Введите название товара: "; cin >> buff;
	cout << setw(20) << "Название товара" << setw(10) << "цена" << setw(10) << "количество" << setw(15) << "секция" << endl;
	//пробежка по массиву и вывод найденого хлеба
	for (R; R < product + n; R++) {
		//cout << R->getName();
		if (strcmp(buff, R->getName()) == 0) {
			cout << setw(20) << R->getName() << setw(10) << R->getPrice() << setw(15) << R->getNum() << setw(15) << R->getQuant() << endl;
		}
	}
	cout << "Введите номер функции: " << endl;
}

void storage::filterNum(storage* product, int n) {
	//то же самое что и поиск но по секции
	int id, i = 0;
	storage* R = product;

	cout << "Введите желаемую секцию: "; cin >> id;
	cout << setw(20) << "Название товара" << setw(10) << "цена" << setw(10) << "количество" << setw(15) << "номер секции" << endl;
	for (R; R < product + n; R++) {
		if (id == R->getQuant()) {
			cout << setw(20) << R->getName() << setw(10) << R->getPrice() << setw(10) << R->getNum() << setw(15) << R->getQuant() << endl;
			i = 1; // для проверки на наличие кокого либо товара
		}
	}
	if (i == 0)cout << "Товаров в данной секции нет" << endl;
	cout << "Введите номер функции: " << endl;
}

void sortBread(storage* product, int n) {
	//сортировка по количеству
	storage* R = product;
	char buff[80] = {};
	double price;
	int quant, num;
	//пузырьковая сортировка
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n - 1; j++) {
			if ((R + j)->getQuant() >(R + j + 1)->getQuant()) {

				strcpy(buff, (R + j)->getName());
				price = (R + j)->getPrice();
				quant = (R + j)->getQuant();
				num = (R + j)->getNum();

				//delete (R + j)->fam;
				//(R + j)->fam = new char[strlen((R + j + 1)->fam) + 1];
				(R + j)->setName((R + j + 1)->getName());
				(R + j)->setPrice((R + j + 1)->getPrice());
				(R + j)->setQuant((R + j + 1)->getQuant());
				(R + j)->setNum((R + j + 1)->getNum());

				//занес данные во второй элемент
				//(R + j + 1)->fam = new char[strlen(buff) + 1];
				//strcpy((R + j + 1)->fam, buff);
				(R + j + 1)->setName(buff);
				(R + j + 1)->setPrice(price);
				(R + j + 1)->setQuant(quant);
				(R + j + 1)->setNum(num);
			}
		}
	}
	cout << "Сортировка прошла успешно!" << endl << "Введите новме функции: ";
}

void storage::saveList(storage* product, int n) {
	//сохранение хлеба
	storage* R = product;

	FILE* file;
	file = fopen("data.txt", "w");

	fprintf(file, "%d\n", n);
	for (R; R < product + n; R++) {
		//хотел в одну строчку но вышло не очень
		//fprintf(file, "%s %f %d %d\n", R->fam, R->price, R->quant, R->num);
		fprintf(file, "%s\n", R->getName());
		fprintf(file, "%f\n", R->getPrice());
		fprintf(file, "%d\n", R->getQuant());
		fprintf(file, "%d\n", R->getNum());
	}
	fclose(file);
};

int storage::loadList(storage* product) {
	//чтение хлеба
	storage* R = product;
	int n = 0, i = 0, quant, num;
	char buff[80];
	float price;
	FILE* file;
	file = fopen("data.txt", "r");

	fscanf(file, "%d", &n);

	for (R; R < product + n; R++) {
		fscanf(file, "%s", buff);
		//R->fam = new char[strlen(buff) + 1];
		//strcpy(R->fam, buff);
		R->setName(buff);

		fscanf(file, "%f", &price); //напрямую не желало работать
		R->setPrice(price);
		fscanf(file, "%d", &quant);
		R->setQuant(quant);
		fscanf(file, "%d", &num);
		R->setNum(num);
	}

	fclose(file);
	return n;
}